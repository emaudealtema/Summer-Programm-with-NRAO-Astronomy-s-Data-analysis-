# -*- coding: utf-8 -*-
"""swc_2_Visualizing_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NHOn77XoxGo7BzxG6P-of7hSZXP9OZLd
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# load our data and using matplotlib to visualize the data( plot )
data= np.loadtxt(fname='/content/drive/MyDrive/swc-python/data/03D1ar.csv', delimiter=',', skiprows=1)
image = plt.imshow(data[:,1:])
plt.show()

print(data.shape)

data1= np.loadtxt(fname='/content/drive/MyDrive/swc-python/data/03D1bp.csv', delimiter=',', skiprows=1)
image = plt.imshow(data1[:,3:])
plt.show()

print(data1.shape)

data2 = np.loadtxt(fname='/content/drive/MyDrive/swc-python/data/03D4cz.csv', delimiter=',', skiprows=1)
image = plt.imshow(data2[:,5:])
plt.show()

print(data2.shape)

# trying the Color component
from matplotlib import image as IMG 
image1 = IMG.imread('/content/drive/MyDrive/swc-python/data/03D1ar.png')
plt.imshow(image1)
plt.show()
print(image1)

from matplotlib import image as IMG 
image1 = IMG.imread('/content/drive/MyDrive/swc-python/data/04D1hd.png')
plt.imshow(image1)
plt.show()
print(image1.shape)

print(list(image1))

#Maximun Brightness in g band in the 03D1ar file
Flux_r = data[:, 1] 
print('maximum flux in g band is:', np.nanmax(Flux_r))

#Minimun Brightness in g band in the 03D1ar file
Flux_r = data[:, 1] 
print('minimum flux in g band is:', np.nanmin(Flux_r))

#Maximun Brightness in r band in the 03D1ar file
Flux_r = data[:, 3] 
print('maximum flux in r band is:', np.nanmax(Flux_r))

#Minimun Brightness in r g band in the 03D1ar file
Flux_r = data[:, 3] 
print('minimum flux in r band is:', np.nanmin(Flux_r))

#Maximun Brightness in i band in the 03D1ar file
Flux_r = data[:, 5] 
print('maximum flux in i band is:', np.nanmax(Flux_r))

#Maximun Brightness i band in the 03D1ar file
Flux_r = data[:, 5] 
print('maximum flux in i band is:', np.nanmin(Flux_r))

#Maximun Brightness in Z band in the 03D1ar file
Flux_r = data[:, 7] 
print('maximum flux in z band is:', np.nanmax(Flux_r))

#Minimun Brightness in Z band in the 03D1ar file
Flux_r = data[:, 7] 
print('maximum flux in z band is:', np.nanmin(Flux_r))

# Here we plot the average flux per day and the modified Julian Day in g band
ave_flux = np.nanmean(data[:,1:], axis=1)
mjd = data[:,0]
ave_plot = plt.plot(mjd, ave_flux)
plt.show()

#After ploting the the average now let's have a look at the maximum flux plot remember we are still in the G band of the 03D1ar file 
max_plot = plt.plot(mjd, np.nanmax(data[:,1:], axis=1))
plt.show()

min_plot = plt.plot(mjd,np.nanmin(data[:,1:], axis=1))
plt.show()

#  the average flux per day and the modified Julian Day in r band
ave_flux = np.nanmean(data1[:,1:], axis=1)
mjd = data1[:,0]
ave_plot = plt.plot(mjd, ave_flux)
plt.show()

#we asked matplotlib.pyplot to create and display a line graph of those two variable.
# The result is a fast rise and slow fall but it is very jagged. Let’s have a look at two other statistics:
max_plot = plt.plot(mjd, np.nanmax(data1[:,1:], axis=1))
plt.show()

min_plot = plt.plot(mjd,np.nanmin(data1[:,1:], axis=1))
plt.show()

#  the average flux per day and the modified Julian Day in r band
ave_flux = np.nanmean(data2[:,1:], axis=1)
mjd = data2[:,0]
ave_plot = plt.plot(mjd, ave_flux)
plt.show()

#we asked matplotlib.pyplot to create and display a line graph of those two variable.
# The result is a fast rise and slow fall but it is very jagged. Let’s have a look at two other statistics:
max_plot = plt.plot(mjd, np.nanmax(data2[:,1:], axis=1))
plt.show()

min_plot = plt.plot(mjd,np.nanmin(data2[:,1:], axis=1))
plt.show()

#  the average flux per day and the modified Julian Day in r band
ave_flux = np.nanmean(data3[:,1:], axis=1)
mjd = data3[:,0]
ave_plot = plt.plot(mjd, ave_flux)
plt.show()

#we asked matplotlib.pyplot to create and display a line graph of those two variable.
# The result is a fast rise and slow fall but it is very jagged. Let’s have a look at two other statistics:
max_plot = plt.plot(mjd, np.nanmax(data3[:,1:], axis=1))
plt.show()

min_plot = plt.plot(mjd,np.nanmin(data3[:,1:], axis=1))
plt.show()

# Use the pyplot library from matplotlib for creating simple visualizations
mjd = data[:,0]

fig = plt.figure(figsize=(15.0, 4.0))

axes1 = fig.add_subplot(1, 4, 1)
axes2 = fig.add_subplot(1, 4, 2)
axes3 = fig.add_subplot(1, 4, 3)
axes4 = fig.add_subplot(1, 4, 4)

axes1.set_xlabel('MJD')
axes1.set_ylabel('g')
axes1.set_ylim([-150,720])
axes1.plot(mjd,data[:,1],'o', color='blue')

axes2.set_xlabel('MJD')
axes2.set_ylabel('r')
axes2.set_ylim([-150,720])
axes2.plot(mjd,data[:,3],'o', color='green')

axes3.set_xlabel('MJD')
axes3.set_ylabel('i')
axes3.set_ylim([-150,720])
axes3.plot(mjd,data[:,5],'o', color='yellow')

axes4.set_xlabel('MJD')
axes4.set_ylabel('z')
axes4.set_ylim([-150,720])
axes4.plot(mjd, data[:,7],'o', color='red')

fig.tight_layout()

plt.show(block=False)

