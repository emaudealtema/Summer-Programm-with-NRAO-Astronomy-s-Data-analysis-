# -*- coding: utf-8 -*-
"""swc_1_nine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZsoWFkVbercN07GE9U5KBjFriEIcqYg0
"""

# in this cell I only import the libraries I will use in this notebook
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# I first upload my dataset into my drive and here I creat a variable named data and I pass my data using loadtxt a numpy function 
data= np.loadtxt(fname='/content/drive/MyDrive/swc-python/data/03D1ar.csv', delimiter=',', skiprows=1)

#Here I print out the content of my variable data
print(data)

# to show the type of the data
print(type(data))

# shape function shows the number of lines or column that tha dataset has
print(data.shape)

print('first value in data:', data[0, 0])

print('last value in data:', data[47, 8])

#Print out the last value of our data remember we have 48 rows and Python start indexing from 0 so 0 - 47 will give 48 rows and 0 - 9 will give 9 columns
print('Last value in data:', data[47, 8])

# print out the first ten daoys columns and  five rows starting from row 5 to row 10
print(data[5:10, 0:9])

small = data[:3, 7:]
print("small is:", + small)

# We double the values of our array and put the content in a variable named doubledata
doubledata = data * 2.0

print(doubledata)

print('original data:')
print(data[:3, 7:])
print('data we double:')
print(doubledata[:3, 7:])

# we can triple our data from here we we two options to do that; create a variable ex": tripledata = doubledata + data or tripledata = data *3.0
tripledata = doubledata + data

print(tripledata[:3, 7:])

print('original data:')
print(data[:3, 7:])
print('data we double:')
print(doubledata[:3, 7:])
print('data we triple:')
print(tripledata[:3, 7:])

#print the mean of g band
print(np.mean(data[:,1]))

# let's use nan mean function to avoid having a NaN as value for our mean
print(np.nanmean(data[:,1]))

import time
print(time.ctime())

# here we print ou the minimum and maximum brightness and the standard deviation in g band meanwhile we are avoiding our program to return a NaN 
maxval, minval, stdval = np.nanmax(data[:,1]), np.nanmin(data[:,1]), np.nanstd(data[:,1])

print('maximum flux in g band:', maxval)
print('minimum flux in g band:', minval)
print('standard deviation in g band:', stdval)

# here we print out everything on the first axis (rows), the second on the second axis (columns)
Flux_g = data[:, 1] 
print('maximum flux in g band is:', np.nanmax(Flux_g))

# here we print ou the minimum and maximum brightness and the standard deviation in r band meanwhile we are avoiding our program to return a NaN 
maxval, minval, stdval = np.nanmax(data[:,3]), np.nanmin(data[:,3]), np.nanstd(data[:,3])

print('maximum flux in r band:', maxval)
print('minimum flux in r band:', minval)
print('standard deviation in r band:', stdval)

# # here we print out everything on the fourth axis (rows), the second on the second axis (columns)
Flux_r = data[:, 3] 
print('maximum flux in r band is:', np.nanmax(Flux_r))

# here we print ou the minimum and maximum brightness and the standard deviation in i band meanwhile we are avoiding our program to return a NaN 
maxval, minval, stdval = np.nanmax(data[:,5]), np.nanmin(data[:,5]), np.nanstd(data[:,5])

print('maximum flux in i band:', maxval)
print('minimum flux in i band :', minval)
print('standard deviation in i band:', stdval)

#  here we print out everything on the sixth axis (rows), the second on the second axis (columns)
Flux_i = data[:, 5] 
print('maximum flux in i band is:', np.nanmax(Flux_i))

# here we print ou the minimum and maximum brightness and the standard deviation in z band meanwhile we are avoiding our program to return a NaN 
maxval, minval, stdval = np.nanmax(data[:,7]), np.nanmin(data[:,7]), np.nanstd(data[:,7])

print('maximum flux in z band:', maxval)
print('minimum flux in z band :', minval)
print('standard deviation in  band:', stdval)

# here we print out everything on the eighth axis (rows), the second on the second axis (columns)
print('maximum flux in z band is:', np.nanmax(data[:,7]))

# Average axis=0
print(np.nanmean(data, axis=0))

print(np.nanmean(data, axis=0).shape)

# print out the average flux for each day of observations
print(np.nanmean(data, axis=1))

#comparison between a numpy array and a float or integer which returns a Boolean array.
index = data[:,1] > 100
print(index)

# to have the total of true index
np.sum(index)

# print out these indexes and add 200 to indexes in axis 1
print(data[:,1][index])
print(data[:,1][index]+200.)
print(data[:,0][index])

# Using numpy to create an array with zero
np.zeros(5)

#by default the type is float but now let's create an array of int type
np.zeros(5, dtype=int)
#np.zeros(5, dtype=bool)

# an array in boolean type
np.zeros(5, dtype=bool)

np.isnan(data[:,1])

std_plot = plt.plot(np.nanstd(data[:,1:], axis=0))
plt.show()

std_plot = plt.plot(np.nanstd(data[:,2:], axis=1))
plt.show()

std_plot = plt.plot(np.nanstd(data[:,4:], axis=1))
plt.show()

ave_flux = np.nanmean(data[:,1:], axis=1)
mjd = data[:,0]
ave_plot = plt.plot(mjd, ave_flux)
plt.show()

plt.plot(mjd,data[:,1],'o', color='blue')
plt.plot(mjd,data[:,3],'o', color='green')
plt.plot(mjd,data[:,5],'o', color='yellow')
plt.plot(mjd,data[:,7],'o', color='red')
plt.show()

df=pd.DataFrame({"A":[1.2,'1.2','a'],"B":['2020-10-2 10:00:00','2020-10-2 11:00:00','2020-10-2 12:00:00']})
df.astype(float, errors='ignore')

data= np.loadtxt(fname='/content/drive/MyDrive/swc-python/data/03D1ar.csv', delimiter=',', skiprows=1) 
# change figsize (swap width and height)
fig = plt.figure(figsize=(3.0, 10.0))

# change add_subplot (swap first two parameters)
axes1 = fig.add_subplot(3, 1, 1)
axes2 = fig.add_subplot(3, 1, 2)
axes3 = fig.add_subplot(3, 1, 3)

axes1.set_ylabel('average')
axes1.plot(np.mean(data, axis=0))

axes2.set_ylabel('max')
axes2.plot(np.max(data, axis=0))

axes3.set_ylabel('min')
axes3.plot(np.min(data, axis=0))

fig.tight_layout()

plt.show()

# A more automated approach
min_data = np.min(data, axis=0)
axes3.set_ylabel('min')
axes3.plot(min_data)
axes3.set_ylim(np.nanmin(min_data), np.nanmax(min_data) * 1.1)

# One method
axes3.set_ylabel('min')
axes3.plot(np.min(data, axis=0))
axes3.set_ylim(0,6)

std_plot = plt.plot(np.nanstd(data[:,1:], axis=0))
plt.show()

A = np.array([[1,2,3], [4,5,6], [7, 8, 9]])
print('A = ')
print(A)

B = np.hstack([A, A])
print('B = ', + B)
#print(B)

C = np.vstack([A, A])
print('C = ', + C)
print(C)

D = np.hstack((A[:, :1], A[:, -1:]))
print('D = ')
print(D)

D = np.delete(A, 1, 1)
print('D = ')
print(D)

# The difference into an array
arr = [0, 2, 5, 9, 14]
diff_arr = np.diff(arr)
print(diff_arr)

#numpy.diff() function, you will get the largest difference between days
np.max(np.diff(data, axis=1), axis=1)

#the numpy.absolute() function can provide the magnitude of the change not the direction.
np.max(np.absolute(np.diff(data, axis=1)), axis=1)